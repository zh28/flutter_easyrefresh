import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class GlobalEasyRefreshLocalizations implements WidgetsLocalizations {
  const GlobalEasyRefreshLocalizations();

  static GlobalEasyRefreshLocalizations current;

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static GlobalEasyRefreshLocalizations of(BuildContext context) =>
      Localizations.of<GlobalEasyRefreshLocalizations>(
          context, GlobalEasyRefreshLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get completeLoad => "Load done";
  String get completeRefresh => "Refresh done";
  String get loadFailed => "Load failed";
  String get loadFinish => "Load completed";
  String get loaded => "Load completed";
  String get loading => "Loading...";
  String get noMore => "No more";
  String get pullToRefresh => "Pull to refresh";
  String get pushToLoad => "Pull to load";
  String get refreshFailed => "Refresh failed";
  String get refreshFinish => "Refresh completed";
  String get refreshed => "Refresh completed";
  String get refreshing => "Refreshing...";
  String get releaseToLoad => "Release to load";
  String get releaseToRefresh => "Release to refresh";
  String get updateAt => "Update at %T";
}

class $zh_HK extends GlobalEasyRefreshLocalizations {
  const $zh_HK();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get refreshed => "刷新完成";
  @override
  String get noMore => "沒有更多數據";
  @override
  String get pullToRefresh => "拉動刷新";
  @override
  String get loadFailed => "加載失敗";
  @override
  String get updateAt => "更新於 %T";
  @override
  String get loading => "正在加載...";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get releaseToLoad => "釋放加載";
  @override
  String get loadFinish => "加載完成";
  @override
  String get loaded => "加載完成";
  @override
  String get completeLoad => "完成加載";
  @override
  String get refreshFailed => "刷新失敗";
  @override
  String get pushToLoad => "拉動加載";
  @override
  String get releaseToRefresh => "釋放刷新";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get completeRefresh => "完成刷新";
}

class $zh_TW extends GlobalEasyRefreshLocalizations {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get refreshed => "刷新完成";
  @override
  String get noMore => "沒有更多數據";
  @override
  String get pullToRefresh => "拉動刷新";
  @override
  String get loadFailed => "加載失敗";
  @override
  String get updateAt => "更新於 %T";
  @override
  String get loading => "正在加載...";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get releaseToLoad => "釋放加載";
  @override
  String get loadFinish => "加載完成";
  @override
  String get loaded => "加載完成";
  @override
  String get completeLoad => "完成加載";
  @override
  String get refreshFailed => "刷新失敗";
  @override
  String get pushToLoad => "拉動加載";
  @override
  String get releaseToRefresh => "釋放刷新";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get completeRefresh => "完成刷新";
}

class $zh_MO extends GlobalEasyRefreshLocalizations {
  const $zh_MO();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get refreshed => "刷新完成";
  @override
  String get noMore => "沒有更多數據";
  @override
  String get pullToRefresh => "拉動刷新";
  @override
  String get loadFailed => "加載失敗";
  @override
  String get updateAt => "更新於 %T";
  @override
  String get loading => "正在加載...";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get releaseToLoad => "釋放加載";
  @override
  String get loadFinish => "加載完成";
  @override
  String get loaded => "加載完成";
  @override
  String get completeLoad => "完成加載";
  @override
  String get refreshFailed => "刷新失敗";
  @override
  String get pushToLoad => "拉動加載";
  @override
  String get releaseToRefresh => "釋放刷新";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get completeRefresh => "完成刷新";
}

class $en extends GlobalEasyRefreshLocalizations {
  const $en();
}

class $zh_CN extends GlobalEasyRefreshLocalizations {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get refreshed => "刷新完成";
  @override
  String get noMore => "没有更多数据";
  @override
  String get pullToRefresh => "拉动刷新";
  @override
  String get loadFailed => "加载失败";
  @override
  String get updateAt => "更新于 %T";
  @override
  String get loading => "正在加载...";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get releaseToLoad => "释放加载";
  @override
  String get loadFinish => "加载完成";
  @override
  String get loaded => "加载完成";
  @override
  String get completeLoad => "完成加载";
  @override
  String get refreshFailed => "刷新失败";
  @override
  String get pushToLoad => "拉动加载";
  @override
  String get releaseToRefresh => "释放刷新";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get completeRefresh => "完成刷新";
}

class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<GlobalEasyRefreshLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "HK"),
      Locale("zh", "TW"),
      Locale("zh", "MO"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<GlobalEasyRefreshLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_HK":
          GlobalEasyRefreshLocalizations.current = const $zh_HK();
          return SynchronousFuture<GlobalEasyRefreshLocalizations>(
              GlobalEasyRefreshLocalizations.current);
        case "zh_TW":
          GlobalEasyRefreshLocalizations.current = const $zh_TW();
          return SynchronousFuture<GlobalEasyRefreshLocalizations>(
              GlobalEasyRefreshLocalizations.current);
        case "zh_MO":
          GlobalEasyRefreshLocalizations.current = const $zh_MO();
          return SynchronousFuture<GlobalEasyRefreshLocalizations>(
              GlobalEasyRefreshLocalizations.current);
        case "en":
          GlobalEasyRefreshLocalizations.current = const $en();
          return SynchronousFuture<GlobalEasyRefreshLocalizations>(
              GlobalEasyRefreshLocalizations.current);
        case "zh_CN":
          GlobalEasyRefreshLocalizations.current = const $zh_CN();
          return SynchronousFuture<GlobalEasyRefreshLocalizations>(
              GlobalEasyRefreshLocalizations.current);
        default:
        // NO-OP.
      }
    }
    GlobalEasyRefreshLocalizations.current =
        const GlobalEasyRefreshLocalizations();
    return SynchronousFuture<GlobalEasyRefreshLocalizations>(
        GlobalEasyRefreshLocalizations.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
